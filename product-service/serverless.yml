service: product-service
frameworkVersion: '3'
useDotenv: true
plugins:
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-west-1
  httpApi:
    cors: true
  environment:
    REGION: ${self:provider.region}
    PRODUCTS_TABLE: ${env:PRODUCTS_TABLE}
    SNS_ENDPOINT: ${env:SNS_ENDPOINT}
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'sqs:*'
          Resource:
            - Fn::GetAtt: [ SQSQueue, Arn ]
        - Effect: Allow
          Action: 'sns:*'
          Resource:
            Ref: SNSTopic
  
resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:QUEUE_NAME}
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${env:TOPIC_NAME}
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_ENDPOINT}
        Protocol: email
        TopicArn:
          Ref: SNSTopic

functions:
  getProductsList:
    handler: src/handlers/getProductsList.getProductsList
    events:
     - httpApi:
        method: GET
        path: /products
    environment:
      StockTableName: ${env:STOCK_TABLE}
  getProductById:
    handler: src/handlers/getProductById.getProductById
    events:
     - httpApi:
        method: GET
        path: /products/{productId}
  createProduct:
    handler: src/handlers/createProduct.createProduct
    events:
     - httpApi:
        method: POST
        path: /products
  catalogBatchProcess:
    handler: src/handlers/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn

  